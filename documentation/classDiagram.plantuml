@startuml classDiagram
abstract GameBase {
    .. Abstract ..
    {abstract} + void GameLoop()
    {abstract} # void Init()

    {abstract} # Player currentPlayer
    {abstract} # Player* players

    .. Protected ..
    # PF_Map_s Map
    # PathFinding pathFinding
}

class Player<T> {
    + uint8_t ID
    + Pawns pawns
    + T state
}

class Pawns<T> {
    + uint8_t ID
    + Cords_s squareCords
    + T State
}

struct Cords_s {
    + uint8_t y
    + uint8_t x
}

class LUDO {
    .. Public ..
    + void GameLoop()
}


class StorageManager <<static>> {
    .. Public ..
    {static} + void SaveGameState()
    + LoadGameState()
}


class MotionController {
    .. Public ..
    {static} + void MovePawn()
}

class MotorDriver <<static>> {

}

class PathFinding <<static>> {
    .. Public ..
    + GeneratePath()
    .. Private ..

}


entity          I2CHAL <<static>>

GameBase --             Player
Pawns <--               Cords_s 
Player <--              Pawns
GameBase <|--           LUDO
StorageManager --       GameBase
MotionController --     GameBase
MotorDriver --          MotionController
GameBase --             PathFinding
GameBase --             I2CHAL         
@enduml